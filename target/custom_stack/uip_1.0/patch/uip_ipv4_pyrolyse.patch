diff -NcrB uip/apps/echoserver/echod.c uip_ipv4/apps/echoserver/echod.c
*** uip/apps/echoserver/echod.c	1970-01-01 01:00:00.000000000 +0100
--- uip_ipv4/apps/echoserver/echod.c	2023-07-25 13:19:28.110317614 +0200
***************
*** 0 ****
--- 1,126 ----
+ /**
+  * \addtogroup apps
+  * @{
+  */
+ 
+ /**
+  * \defgroup echod Web server
+  * @{
+  * The uIP echo server is a very simplistic implementation of an echo
+  * server. It sends back any data received in aTCP payload.
+ 
+  */
+ 
+ /**
+  * \file
+  *         Echo server
+  * \author
+  *         Johan Mazel <johan.mazel@ssi.gouv.fr>
+  */
+ 
+ #include "uip.h"
+ #include "echod.h"
+ 
+ #include <stdio.h>
+ #include <string.h>
+ 
+ #define STATE_WAITING 0
+ #define STATE_OUTPUT  1
+ 
+ static void aborted(void) {}
+ static void timedout(void) {}
+ static void closed(void) {}
+ 
+ static void connected(void) {
+   struct echod_state *s = (struct echod_state *)&(uip_conn->appstate);
+   s->state = ECHO_CONNECTED;
+   s->textlen = 0;
+ }
+ static void newdata(void) {
+   printf("newdata: start\n");
+   unsigned int len;
+   unsigned char * appdata;
+ 
+   struct echod_state *s = (struct echod_state *)&(uip_conn->appstate);
+   printf("newdata: s->state == %u\n",s->state);
+   if(s->state == ECHO_CONNECTED || s->state == ECHO_ACKED) {
+     s->state = ECHO_SENT;
+ 
+     len = uip_datalen();
+     appdata = uip_appdata;
+     printf("newdata: uip_datalen() == %u\r\n", len);
+ 
+     char * data_to_send = malloc(sizeof(char)*len);
+     strncpy(data_to_send,appdata,sizeof(char)*len);
+     s->textptr = data_to_send;
+     s->textlen = len;
+ 
+     uip_send(appdata, len);
+   }
+   printf("newdata: end\n");
+ }
+ 
+ static void acked(void) {
+   printf("acked: start\n");
+   struct echod_state *s = (struct echod_state *)&(uip_conn->appstate);
+   printf("acked: s->textlen == %u\n",s->textlen);
+   switch(s->state) {
+     case ECHO_SENT:
+       printf("acked: ECHO_SENT\n");
+       s->state = ECHO_ACKED;
+       break;
+     case ECHO_ACKED:
+       printf("acked: ECHO_ACKED\n");
+       break;
+   }
+   printf("acked: end\n");
+ }
+ 
+ static void senddata(void) {
+   struct echod_state *s = (struct echod_state *)&(uip_conn->appstate);
+   if(s->textlen > 0) {
+     uip_send(s->textptr, s->textlen);
+   }
+ }
+ 
+ void echod_appcall(void) {
+   printf("echod_appcall: start\n");
+   if(uip_aborted()) {
+     aborted();
+   }
+   if(uip_timedout()) {
+     timedout();
+   }
+   if(uip_closed()) {
+     closed();
+   }
+   if(uip_connected()) {
+     connected();
+   }
+   if(uip_acked()) {
+     acked();
+   }
+   if(uip_newdata()) {
+     newdata();
+   }
+   if(uip_rexmit() ||
+      uip_newdata()) {
+     senddata();
+   }
+   printf("echod_appcall: end\n");
+ }
+ 
+ /*---------------------------------------------------------------------------*/
+ /**
+  * \brief      Initialize the echo server
+  *
+  *             This function initializes the echo server and should be
+  *             called at system boot-up.
+  */
+ void
+ echod_init(void)
+ {
+   uip_listen(HTONS(7));
+ }
+ /*---------------------------------------------------------------------------*/
+ /** @} */
diff -NcrB uip/apps/echoserver/echod.h uip_ipv4/apps/echoserver/echod.h
*** uip/apps/echoserver/echod.h	1970-01-01 01:00:00.000000000 +0100
--- uip_ipv4/apps/echoserver/echod.h	2023-07-17 10:32:14.205545254 +0200
***************
*** 0 ****
--- 1,20 ----
+ #ifndef __ECHOD_H__
+ #define __ECHOD_H__
+ 
+ #define ECHO_CONNECTED 0
+ #define ECHO_SENT 1
+ #define ECHO_ACKED 2
+ 
+ struct echod_state {
+   u8_t state;
+   char *textptr;
+   int textlen;
+ };
+ 
+ void echod_init(void);
+ void echod_appcall(void);
+ 
+ void echod_log(char *msg);
+ void echod_log_file(u16_t *requester, char *file);
+ 
+ #endif /* __ECHOD_H__ */
diff -NcrB uip/apps/echoserver/echoserver.h uip_ipv4/apps/echoserver/echoserver.h
*** uip/apps/echoserver/echoserver.h	1970-01-01 01:00:00.000000000 +0100
--- uip_ipv4/apps/echoserver/echoserver.h	2023-07-25 13:19:28.110317614 +0200
***************
*** 0 ****
--- 1,49 ----
+ /*
+  * Copyright (c) 2002, Adam Dunkels.
+  * All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the above copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above
+  *    copyright notice, this list of conditions and the following
+  *    disclaimer in the documentation and/or other materials provided
+  *    with the distribution.
+  * 3. The name of the author may not be used to endorse or promote
+  *    products derived from this software without specific prior
+  *    written permission.
+  *
+  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
+  * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+  *
+  * This file is part of the uIP TCP/IP stack
+  *
+  * $Id: echoserver.h,v 1.2 2006/06/11 21:46:38 adam Exp $
+  *
+  */
+ #ifndef __ECHOSERVER_H__
+ #define __ECHOSERVER_H__
+ 
+ #include "echod.h"
+ 
+ typedef struct echod_state uip_tcp_appstate_t;
+ /* UIP_APPCALL: the name of the application function. This function
+    must return void and take no arguments (i.e., C type "void
+    appfunc(void)"). */
+ #ifndef UIP_APPCALL
+ #define UIP_APPCALL     echod_appcall
+ #endif
+ 
+ 
+ #endif /* __ECHOSERVER_H__ */
diff -NcrB uip/apps/echoserver/Makefile.echoserver uip_ipv4/apps/echoserver/Makefile.echoserver
*** uip/apps/echoserver/Makefile.echoserver	1970-01-01 01:00:00.000000000 +0100
--- uip_ipv4/apps/echoserver/Makefile.echoserver	2023-07-17 10:32:14.205545254 +0200
***************
*** 0 ****
--- 1 ----
+ APP_SOURCES += echod.c
diff -NcrB uip/uip/uipopt.h uip_ipv4/uip/uipopt.h
*** uip/uip/uipopt.h	2023-07-25 13:19:28.094317614 +0200
--- uip_ipv4/uip/uipopt.h	2023-10-20 15:04:48.765025819 +0200
***************
*** 153,159 ****
   *
   * \hideinitializer
   */
! #define UIP_REASSEMBLY 0
  
  /**
   * The maximum time an IP fragment should wait in the reassembly
--- 153,159 ----
   *
   * \hideinitializer
   */
! #define UIP_REASSEMBLY 1
  
  /**
   * The maximum time an IP fragment should wait in the reassembly
diff -NcrB uip/unix/main.c uip_ipv4/unix/main.c
*** uip/unix/main.c	2023-07-25 13:19:28.622317609 +0200
--- uip_ipv4/unix/main.c	2023-08-01 14:01:55.948714913 +0200
***************
*** 62,75 ****
    tapdev_init();
    uip_init();
  
!   uip_ipaddr(ipaddr, 192,168,0,2);
    uip_sethostaddr(ipaddr);
!   uip_ipaddr(ipaddr, 192,168,0,1);
    uip_setdraddr(ipaddr);
    uip_ipaddr(ipaddr, 255,255,255,0);
    uip_setnetmask(ipaddr);
  
!   httpd_init();
    
    /*  telnetd_init();*/
    
--- 62,77 ----
    tapdev_init();
    uip_init();
  
!   uip_ipaddr(ipaddr, 192,168,57,27);
    uip_sethostaddr(ipaddr);
!   uip_ipaddr(ipaddr, 192,168,57,26);
    uip_setdraddr(ipaddr);
    uip_ipaddr(ipaddr, 255,255,255,0);
    uip_setnetmask(ipaddr);
  
!   /* httpd_init();*/
! 
!   echod_init();
    
    /*  telnetd_init();*/
    
diff -NcrB uip/unix/Makefile uip_ipv4/unix/Makefile
*** uip/unix/Makefile	2023-07-25 13:19:28.106317614 +0200
--- uip_ipv4/unix/Makefile	2023-07-17 10:32:13.941545251 +0200
***************
*** 34,40 ****
  
  CC     = gcc
  AR     = ar
! APPS   = webserver
  CFLAGS = -Wall -g -I../uip -I. -fpack-struct -Os
  -include ../uip/Makefile.include
  
--- 34,40 ----
  
  CC     = gcc
  AR     = ar
! APPS   = echoserver
  CFLAGS = -Wall -g -I../uip -I. -fpack-struct -Os
  -include ../uip/Makefile.include
  
diff -NcrB uip/unix/tapdev.c uip_ipv4/unix/tapdev.c
*** uip/unix/tapdev.c	2023-07-25 13:19:28.106317614 +0200
--- uip_ipv4/unix/tapdev.c	2023-08-01 14:01:55.948714913 +0200
***************
*** 36,43 ****
  
  #define UIP_DRIPADDR0   192
  #define UIP_DRIPADDR1   168
! #define UIP_DRIPADDR2   0
! #define UIP_DRIPADDR3   1
  
  #include <fcntl.h>
  #include <stdlib.h>
--- 36,43 ----
  
  #define UIP_DRIPADDR0   192
  #define UIP_DRIPADDR1   168
! #define UIP_DRIPADDR2   57
! #define UIP_DRIPADDR3   26
  
  #include <fcntl.h>
  #include <stdlib.h>
diff -NcrB uip/unix/uip-conf.h uip_ipv4/unix/uip-conf.h
*** uip/unix/uip-conf.h	2023-07-25 13:19:28.106317614 +0200
--- uip_ipv4/unix/uip-conf.h	2023-07-25 13:19:28.110317614 +0200
***************
*** 146,155 ****
  /*#include "smtp.h"*/
  /*#include "hello-world.h"*/
  /*#include "telnetd.h"*/
! #include "webserver.h"
  /*#include "dhcpc.h"*/
  /*#include "resolv.h"*/
  /*#include "webclient.h"*/
  
  #endif /* __UIP_CONF_H__ */
  
--- 146,156 ----
  /*#include "smtp.h"*/
  /*#include "hello-world.h"*/
  /*#include "telnetd.h"*/
! /*#include "webserver.h"*/
  /*#include "dhcpc.h"*/
  /*#include "resolv.h"*/
  /*#include "webclient.h"*/
+ #include "echoserver.h"
  
  #endif /* __UIP_CONF_H__ */
  
