*** smoltcp_ref/examples/tcp_echo_server.rs	1970-01-01 00:00:00.000000000 +0000
--- smoltcp_mod/examples/tcp_echo_server.rs	2025-03-03 13:15:27.037999427 +0000
***************
*** 0 ****
--- 1,97 ----
+ mod utils;
+ 
+ use log::debug;
+ use std::fmt::Write;
+ use std::os::unix::io::AsRawFd;
+ 
+ use smoltcp::iface::{Config, Interface, SocketSet};
+ use smoltcp::phy::{wait as phy_wait, Device, Medium};
+ use smoltcp::socket::tcp;
+ use smoltcp::time::{Duration, Instant};
+ use smoltcp::wire::{EthernetAddress, IpAddress, IpCidr, Ipv4Address, Ipv6Address};
+ 
+ fn main() {
+     utils::setup_logging("");
+ 
+     let (mut opts, mut free) = utils::create_options();
+     utils::add_tuntap_options(&mut opts, &mut free);
+     utils::add_middleware_options(&mut opts, &mut free);
+ 
+     let mut matches = utils::parse_options(&opts, free);
+     let device = utils::parse_tuntap_options(&mut matches);
+     let fd = device.as_raw_fd();
+     let mut device =
+         utils::parse_middleware_options(&mut matches, device, /*loopback=*/ false);
+ 
+     // Create interface
+     let mut config = match device.capabilities().medium {
+         Medium::Ethernet => {
+             Config::new(EthernetAddress([0x02, 0x00, 0x00, 0x00, 0x00, 0x01]).into())
+ 	}
+         Medium::Ip => Config::new(smoltcp::wire::HardwareAddress::Ip),
+         Medium::Ieee802154 => todo!(),
+     };
+ 
+     config.random_seed = rand::random();
+ 
+     let mut iface = Interface::new(config, &mut device, Instant::now());
+     iface.update_ip_addrs(|ip_addrs| {
+         ip_addrs
+             .push(IpCidr::new(IpAddress::v4(192, 168, 57, 53), 24))
+             .unwrap();
+         ip_addrs
+             .push(IpCidr::new(IpAddress::v6(0xfd00, 0x0000, 0x0000, 0x0057, 0x0000, 0x0000, 0x0000, 0x0053), 64))
+             .unwrap();
+     });
+     iface
+         .routes_mut()
+         .add_default_ipv4_route(Ipv4Address::new(192, 168, 57, 52))
+         .unwrap();
+     iface
+         .routes_mut()
+         .add_default_ipv6_route(Ipv6Address::new(0xfd00, 0x0000, 0x0000, 0x0057, 0x0000, 0x0000, 0x0000, 0x0052))
+         .unwrap();
+ 
+     // Create sockets for at most 200 concurrent connections
+     let mut sockets = SocketSet::new(vec![]);
+     let mut tcp_handle_v = vec![];
+     for _ in 0..200 {
+         let tcp_rx_buffer = tcp::SocketBuffer::new(vec![0; 150]);
+         let tcp_tx_buffer = tcp::SocketBuffer::new(vec![0; 150]);
+         let tcp_socket = tcp::Socket::new(tcp_rx_buffer, tcp_tx_buffer);
+         let tcp_handle = sockets.add(tcp_socket);
+ 	tcp_handle_v.push(tcp_handle);
+     } 
+ 
+     loop {
+         let timestamp = Instant::now();
+         iface.poll(timestamp, &mut device, &mut sockets);
+     	for tcp_handle in &tcp_handle_v {
+            let socket = sockets.get_mut::<tcp::Socket>(*tcp_handle); 
+ 	        if !socket.is_open() {
+                 socket.listen(7).unwrap()
+             }
+             if socket.may_recv() {
+                 let data = socket.recv(|buffer| {
+                     let recvd_len = buffer.len();
+                     let mut data = buffer.to_owned();
+                     if !data.is_empty() {
+                         //debug!("tcp:7 recv data: {:?}", data);
+                         data = data.split(|&b| b == b'\n').collect::<Vec<_>>().concat();
+                         //data.extend(b"\n");
+                     }
+                     (recvd_len, data)
+                 })
+                 .unwrap();
+                 if socket.can_send() && !data.is_empty() {
+                     //debug!("tcp:7 send data: {:?}", data);
+                     socket.send_slice(&data[..]).unwrap();
+                 }
+             } else if socket.may_send() {
+                 debug!("tcp:7 close");
+                 socket.close();
+             }
+         }
+         phy_wait(fd, iface.poll_delay(timestamp, &sockets)).expect("wait error");
+     }
+ }
*** smoltcp_ref/Cargo.toml	2025-03-03 13:16:16.866137866 +0000
--- smoltcp_mod/Cargo.toml	2025-02-27 14:54:17.775462621 +0000
***************
*** 328,332 ****
--- 328,336 ----
  name = "dns"
  required-features = ["std", "medium-ethernet", "medium-ip", "phy-tuntap_interface", "proto-ipv4", "socket-dns"]
  
+ [[example]]
+ name = "tcp_echo_server"
+ required-features = ["std", "medium-ethernet", "medium-ip", "phy-tuntap_interface", "proto-ipv4", "socket-tcp"]
+ 
  [profile.release]
  debug = 2