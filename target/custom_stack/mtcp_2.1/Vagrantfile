# -*- mode: ruby -*-
# vi: set ft=ruby :

# If you do "vagrant up --provider=libvirt" after using virtualbox, you may 
# need to do "sudo ip addr flush vboxnetX" to remove the IP address linked 
# to a vboxnetX interface.
# If you do "vagrant up --provider=virtualbox" after libvirt, you may need 
# to do "sudo ip addr flush virbrX" to remove the IP address linked to a
# virbrX interface.

base_memory = ENV["VAGRANT_PYROLYSE_BASE_MEMORY"] || 1024
base_cpus = ENV["VAGRANT_PYROLYSE_BASE_CPU"] || 2

require 'json'
conf_path = "conf.json"
file = open(conf_path)
json_s = file.read
network_config = JSON.parse(json_s)

base_mac_addr = network_config["base"]["mac_addr"]
base_ipv4_addr = network_config["base"]["ipv4_addr"]
base_ipv6_addr = network_config["base"]["ipv6_addr"]
base_network_interface = network_config["base"]["network_interface"]

target_eth_mac_addr = network_config["target"]["mac_addr"]
target_eth_ipv4_addr = network_config["target"]["ipv4_addr"]
target_eth_ipv6_addr = network_config["target"]["ipv6_addr"]

target_mac_addr = network_config["app"]["mac_addr"]
target_ipv4_addr = network_config["app"]["ipv4_addr"]
target_ipv6_addr = network_config["app"]["ipv6_addr"]

target_family = network_config["target"]["family"]
target_name = network_config["target"]["name"]

base_mac_addr_with_colons = base_mac_addr.scan(/.{1,2}/).join(":")
target_eth_mac_addr_with_colons = target_mac_addr.scan(/.{1,2}/).join(":")
target_mac_addr_with_colons = app_mac_addr.scan(/.{1,2}/).join(":")


Vagrant.configure("2") do |config|
  config.vm.define "base" do |base|
    base.vm.box = "debian/testing64"
    base.vm.box_version = "20250426.1"
    
    base.vm.provider "virtualbox" do |v|
      v.memory = base_memory
      v.cpus = base_cpus
    end
    
    base.vm.network "private_network", name: "vboxnet2", ip: base_ipv4_addr, :mac => base_mac_addr
    base.vm.provision "shell", run: "always", args: base_ipv6_addr, inline: "ip -6 addr add $1/64 dev eth1"
    base.vm.hostname = "base"
    
    base.vm.provider :virtualbox do |vb, override|
      # We deactivate guest because vboxsf is not working if we do not (Debian 10 Buster/virtualbox-6.1 from Oracle repository).
      override.vbguest.auto_update = false
    end
    
    base.vm.synced_folder ".", "/vagrant", disabled: true
    # This setups vboxsf when using VirtualBox.
    base.vm.synced_folder "../../..", "/home/vagrant/pyrolyse"
    # This replace the default rsync method by NFS when using libvirt.
    base.vm.provider :libvirt do |lv, override|
      override.vm.synced_folder "../../..", "/home/vagrant/pyrolyse", type: "nfs"
    end
    
    base.vm.provision "shell", inline: <<-SHELL
      apt update
      
      # IP experiments
      apt install -y --no-install-recommends tcpdump tcpreplay ethtool python3-scapy
      ethtool -K eth1 tso off gso off rxvlan off txvlan off ufo off gro off lro off tx off sg off rx off
      
      # TCP experiments
      apt install -y --no-install-recommends unzip net-tools parallel jq

      echo "export PYROLYSE_PATH=/home/vagrant/pyrolyse" >> /home/vagrant/.bashrc
    SHELL

    base.vm.provision "shell", run: "always", args: base_mac_addr_with_colons, inline: <<-SHELL
      echo "export BASE_MAC_ADDR=$1" >> /home/vagrant/.bashrc
    SHELL
    base.vm.provision "shell", run: "always", args: [base_ipv4_addr, base_ipv6_addr, base_network_interface], inline: <<-SHELL
      echo "export BASE_IPV4_ADDR=$1" >> /home/vagrant/.bashrc
      echo "export BASE_IPV6_ADDR=$2" >> /home/vagrant/.bashrc
      echo "export BASE_NETWORK_INTERFACE=$3" >> /home/vagrant/.bashrc
    SHELL

    base.vm.provision "shell", run: "always", args: target_eth_mac_addr_with_colons, inline: <<-SHELL
      echo "export TARGET_MAC_ADDR=$1" >> /home/vagrant/.bashrc
    SHELL
    base.vm.provision "shell", run: "always", args: [target_eth_ipv4_addr, target_eth_ipv6_addr], inline: <<-SHELL
      echo "export TARGET_ETH_IPV4_ADDR=$1" >> /home/vagrant/.bashrc
      echo "export TARGET_ETH_IPV6_ADDR=$2" >> /home/vagrant/.bashrc
    SHELL
    base.vm.provision "shell", run: "always", args: [target_ipv4_addr, target_ipv6_addr], inline: <<-SHELL
      echo "export TARGET_IPV4_ADDR=$1" >> /home/vagrant/.bashrc
      echo "export TARGET_IPV6_ADDR=$2" >> /home/vagrant/.bashrc
    SHELL
    base.vm.provision "shell", run: "always", args: [target_family, target_name], inline: <<-SHELL
      echo "export TARGET_FAMILY=$1" >> /home/vagrant/.bashrc
      echo "export TARGET_NAME=$2" >> /home/vagrant/.bashrc
    SHELL

    # We populate the ARP table so that the Rust TCP testing tool can get the MAC/IP info.
    #base.vm.provision "shell", run: "always", args: [app_ipv4_addr, app_mac_addr], inline: <<-SHELL
    base.vm.provision "shell", run: "always", args: [target_ipv4_addr, target_eth_mac_addr], inline: <<-SHELL
      arp -s $1 $2
    SHELL

    # Next line is needed to block answer to UDP echo data when testing IP fragmentation.
    base.vm.provision "shell", run: "always", inline: <<-SHELL
      iptables -I OUTPUT -p icmp --icmp-type port-unreachable -j DROP
    SHELL
  end
  
  config.vm.define "target" do |target|
    #target.vm.box = "debian/bookworm64"
    #target.vm.box_version = "12.20250426.1"
    target.vm.box = "debian/buster64"
    target.vm.box_version = "10.20231211.1"
    #target.vm.box_version = "9.99.0"
    #target.vm.box_version = "10.20210228.1"
    

    target.vm.provider "virtualbox" do |v|
      v.memory = 8192 # for hugepages
      v.cpus = 4
    end

    target.vm.network "private_network", name: "vboxnet2", ip: target_eth_ipv4_addr, :mac => target_mac_addr
    #target.vm.provision "shell", run: "always", args: target_eth_ipv6_addr, inline: "ip -6 addr add $1/64 dev eth1"
    target.vm.hostname = "target"
    
    target.vm.synced_folder ".", "/vagrant", disabled: true
    target.vm.synced_folder "patch", "/home/vagrant/patch", type: "rsync", rsync__exclude: ".git/"

    target.vm.provider :virtualbox do |vb, override|
      # We deactivate guest because we get this error: "E: Unable to locate package linux-headers-3.16.0-9-amd64".
      override.vbguest.auto_update = false
    end
    
    target.vm.provision "shell", inline: <<-SHELL
      sed -i "s/deb.debian.org\\/debian buster-backports/archive.debian.org\\/debian buster-backports/g" /etc/apt/sources.list
      apt update
      apt install -y --no-install-recommends linux-image-4.19.0-27-amd64 linux-headers-4.19.0-27-amd64
    SHELL
    target.vm.provision :reload

    target.vm.provision "shell", inline: <<-SHELL
      apt update
      apt install -y --no-install-recommends linux-headers-$(uname -r) tcpdump build-essential libnuma-dev libpcap-dev python3-pip libelf-dev zlib1g-dev pciutils bc libgmp3-dev autoconf git meson automake pkg-config cmake net-tools
    SHELL

    target.vm.provision "shell", privileged: false, args: [target_eth_ipv4_addr, target_eth_ipv6_addr], inline: <<-SHELL
      git clone https://github.com/mtcp-stack/mtcp/
      cd mtcp
      #git checkout 0c3882107a6325d5d0479247ab1344f4eb6fcbf2
      git checkout 0463aad5ecb6b5bca85903156ce1e314a58efc19 # checkout to latest tested commit
      #patch -p1 < /home/vagrant/patch/mtcp.patch

      # building dpdk
      export RTE_SDK=`echo $PWD`/dpdk 
      export RTE_TARGET=x86_64-native-linuxapp-gcc
      git submodule init
      git submodule update
 
      ##cp /home/vagrant/patch/dpdk-setup-not-interactive.sh "${RTE_SDK}"/usertools/
      #patch -p1 < /home/vagrant/patch/mtcp_v2.patch
      #source "${RTE_SDK}"/usertools/dpdk-setup-not-interactive.sh
#
      sudo /sbin/modprobe uio
      sudo /sbin/modprobe uio_pci_generic
#
      ## command 15 - building dpdk
      #setup_target x86_64-native-linuxapp-gcc
#
      ## command 18 - install igb_uio driver for Intel NICs
      #load_igb_uio_module
#
      ## command 22 - setup 2048 2MB hugepages
      #set_numa_pages 2
#
      ## command 24 equivalent - register the Ethernet ports
      #sudo ip link set eth1 down
      #sudo usertools/dpdk-devbind.py --unbind 00:08.0
      #sudo usertools/dpdk-devbind.py -b uio_pci_generic 00:08.0
#
      ##cd dpdk
      ###sudo modprobe uio_pci_generic
      ##make install T=x86_64-native-linuxapp-gcc
      ##sudo ldconfig
      ##sudo /sbin/insmod $RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko
##
##
      ### Creates hugepages
      ###echo "echo 2048 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages" > .echo_tmp
      ###sh .echo_tmp
      ###rm -f .echo_tmp
      ##echo "echo 2048 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages" >> .echo_tmp
      ##sudo sh .echo_tmp
      ##rm -f .echo_tmp
      ##sudo mkdir -p /mnt/huge
      ##sudo mount -t hugetlbfs nodev /mnt/huge
##
      ### Binding NIC 
      sudo ip link set eth1 down
      sudo usertools/dpdk-devbind.py --unbind 00:08.0
      sudo usertools/dpdk-devbind.py -b uio_pci_generic 00:08.0
##
      ## create interface
      #cd /home/vagrant/mtcp/dpdk-iface-kmod
      #make -j 6
      #sudo insmod ./dpdk_iface.ko
      #sudo -E make run
      #ifconfig dpdk0 $1 netmask 255.255.255.0 up
      #cd ..
##
##
      #### building mtcp
      ##cd /home/vagrant/mtcp
      ##./configure --with-dpdk-lib=$RTE_SDK/$RTE_TARGET --disable-hwcsum
      ##make -j 6
    SHELL
    
    target.vm.provision "shell", run: "always", args: [target_ipv4_addr, target_ipv6_addr], inline: <<-SHELL
      ### IP experiments - Desactivating offloading
      ##ethtool -K dpdk0 tso off gso off rxvlan off txvlan off ufo off gro off lro off tx off sg off rx off
      ##sysctl -w net.ipv4.ip_forward=1
      ##sysctl -w net.ipv6.conf.all.forwarding=1
      #cd /home/vagrant/mtcp
      #
      ## load uio_pci_generic
      #/sbin/modprobe uio
      #/sbin/insmod $RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko
	    ##modprobe uio_pci_generic
#
      ## Creates hugepages
      ##echo "echo 2048 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages" > .echo_tmp
      ##sh .echo_tmp
      ##rm -f .echo_tmp
      #echo "echo 2048 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages" >> .echo_tmp
      #sh .echo_tmp
      #rm -f .echo_tmp
      #mkdir -p /mnt/huge
      #mount -t hugetlbfs nodev /mnt/huge
#
      ## Binding NIC 
      #ip link set eth1 down
      #dpdk/usertools/dpdk-devbind.py --unbind 00:08.0
      #dpdk/usertools/dpdk-devbind.py -b uio_pci_generic 00:08.0
#
      ## create interface
      export RTE_SDK=`echo $PWD`/dpdk 
      export RTE_TARGET=x86_64-native-linuxapp-gcc
      cd dpdk-iface-kmod
      make -j 6
      insmod ./dpdk_iface.ko
      sudo -E make run
      ifconfig dpdk0 $1 netmask 255.255.255.0 up
      #cd ..
#
      #echo "Launching tcp_echo_server app"
      #cd /home/vagrant/mtcp/apps/example
      #./echoserver echoserver.conf &> /home/vagrant/log & 
      #echo "mtcp launched"
    SHELL
  end
end

# Test commands (from base)
# IPv4: ping -c 5 "${TARGET_IPV4_ADDR}"
# IPv6: ping -c 5 "${TARGET_IPV6_ADDR}"
# TCP: sudo hping3 -S "${TARGET_IPV4_ADDR}" -p 7
# TCP: nc "${TARGET_IPV4_ADDR}" 7 (type "toto" and observe "toto" sent back)


